- include_vars: ulimit.yml

- name: installing epel release
  yum: pkg=epel-release state=installed
  tags:
    - install epel-release

- name: installing basic tools
  yum: pkg={{item}} state=installed
  with_items:
    - vim
    - git
    - python-pip
    - screen
    - net-tools

- name: installing additional required packages
  yum: pkg={{item}} state=installed
  with_items: additional_packages

- name: copying cronwrapper
  copy: src=cron-wrapper dest=/usr/bin/cron-wrapper mode=0755
  tags:
    - cronwrapper

- name: creating a group for admin
  group: name=sudoaccess state=present
  
- name: giving sudo access to group
  copy: src=sudoaccess dest=/etc/sudoers.d/sudoaccess mode=0440 validate='visudo -cf %s'

- name: creating a user for admin
  user: name={{item}} groups=sudoaccess
  with_items:
    - vikas

- name: creating user for application to be deployed
  user: name={{item}}
  with_items:
    - myapp

- name: creating .ssh directory for admin
  file: path=/home/{{item}}/.ssh state=directory mode=700 owner={{item}}
  with_items:
    - vikas
  tags:
    - access

- name: copying public key for admin user
  copy: src=keys/{{item}}-authorized_keys dest=/home/{{item}}/.ssh/authorized_keys mode=600 owner={{item}}
  with_items:
    - vikas
  tags:
    - access

- name: Create ulimit configuration
  template:
    src: limits.conf.j2
    dest: "{{ ulimit_config_location }}"
  tags:
    - ulimit_config

- name: Disable root login
  lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
  notify: ssh reload
  tags:
    - root disable

- name: Disable password login step 1
  lineinfile: dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
  tags:
    - password less login

- name: Disable password login step 2
  lineinfile: dest=/etc/ssh/sshd_config regexp="^ChallengeResponseAuthentication" line="ChallengeResponseAuthentication no" state=present
  notify: ssh reload
  tags:
    - password less login

- name: Additional services need to restart
  service: name={{item}} state=restarted
  with_items: additional_service_restart
  ignore_erros: true

- name: Additional services need to be start
  service: name={{item}} state=started
  with_items: additional_service_start
  ignore_errors: true

- name: Additional services need to be reloaded
  service: name={{item}} state=reloaded
  with_items: additional_service_reload
  ignore_errors: true
